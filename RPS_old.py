import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random
import os
import asyncio
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('game_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_balances (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 1000
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS active_games (
            user_id INTEGER PRIMARY KEY,
            opponent_id INTEGER,
            move TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_balance(user_id):
    conn = sqlite3.connect('game_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()
    conn.close()
    return balance[0] if balance else 1000

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_balance(user_id, amount):
    conn = sqlite3.connect('game_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO user_balances (user_id, balance) VALUES (?, ?)', (user_id, 1000))
    cursor.execute('UPDATE user_balances SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
def add_active_game(user_id, opponent_id, move=None):
    conn = sqlite3.connect('game_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO active_games (user_id, opponent_id, move) VALUES (?, ?, ?)', (user_id, opponent_id, move))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
def get_active_game(user_id):
    conn = sqlite3.connect('game_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT opponent_id, move FROM active_games WHERE user_id = ?', (user_id,))
    game = cursor.fetchone()
    conn.close()
    return {"opponent_id": game[0], "move": game[1]} if game else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
def remove_active_game(user_id):
    conn = sqlite3.connect('game_bot.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM active_games WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message: types.Message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)

    invite_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º", callback_data="play_vs_bot"),
        types.InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_funds"),
        types.InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", url=invite_link)
    )
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SIFA Games!\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} SIFA",
        reply_markup=builder.as_markup()
    )

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@dp.message(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) > 1 and args[1].isdigit():
        inviter_id = int(args[1])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–ª–∏ –±–æ—Ç–∞
        if inviter_id == user_id or inviter_id == (await bot.get_me()).id:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ! üòÖ")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
        add_active_game(user_id, inviter_id)
        add_active_game(inviter_id, user_id)

        await message.answer(
            f"üéÆ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {inviter_id}! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è."
        )
        await send_move_options(message)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message)

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.callback_query(lambda c: c.data == "add_funds")
async def add_funds(callback: types.CallbackQuery):
    update_user_balance(callback.from_user.id, 500)
    await callback.message.edit_text(
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 500 SIFA!\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(callback.from_user.id)} SIFA",
        reply_markup=InlineKeyboardBuilder().add(
            types.InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
        ).as_markup()
    )

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await show_main_menu(callback.message)

# –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º
@dp.callback_query(lambda c: c.data == "play_vs_bot")
async def play_vs_bot(callback: types.CallbackQuery):
    if get_user_balance(callback.from_user.id) < 10:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SIFA!", show_alert=True)
        return
    await send_move_options(callback.message, vs_bot=True)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–µ—Å—Ç–∞
async def send_move_options(message: types.Message, vs_bot=False):
    builder = InlineKeyboardBuilder()
    moves = [("‚úä –ö–∞–º–µ–Ω—å", "rock"), ("‚úã –ë—É–º–∞–≥–∞", "paper"), ("‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", "scissors")]
    for text, move in moves:
        if vs_bot:
            builder.add(types.InlineKeyboardButton(text=text, callback_data=f"bot_move_{move}"))
        else:
            builder.add(types.InlineKeyboardButton(text=text, callback_data=f"pvp_move_{move}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∂–µ—Å—Ç:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –¥–ª—è –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º
@dp.callback_query(lambda c: c.data.startswith("bot_move_"))
async def bot_move(callback: types.CallbackQuery):
    user_move = callback.data.split("_")[2]
    await resolve_game(callback, user_move, vs_bot=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º
@dp.callback_query(lambda c: c.data.startswith("pvp_move_"))
async def pvp_move(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_move = callback.data.split("_")[2]
    add_active_game(user_id, get_active_game(user_id)["opponent_id"], user_move)

    opponent_id = get_active_game(user_id)["opponent_id"]
    opponent_game = get_active_game(opponent_id)

    if opponent_game and opponent_game["move"]:
        await resolve_pvp_game(user_id, opponent_id)
    else:
        await callback.message.edit_text("–û–∂–∏–¥–∞–µ–º —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º
async def resolve_game(callback, user_move, vs_bot=False):
    moves_dict = {"rock": "‚úä", "paper": "‚úã", "scissors": "‚úåÔ∏è"}
    user_choice = moves_dict[user_move]
    bot_choice = random.choice(list(moves_dict.values()))

    result, balance_change = calculate_result(user_choice, bot_choice)
    update_user_balance(callback.from_user.id, balance_change)

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üéÆ –°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_vs_bot"),
        types.InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
    )

    await callback.message.edit_text(
        f"–í–∞—à –≤—ã–±–æ—Ä: {user_choice}\n"
        f"–í—ã–±–æ—Ä –±–æ—Ç–∞: {bot_choice}\n\n"
        f"{result}\n"
        f"–ë–∞–ª–∞–Ω—Å: {get_user_balance(callback.from_user.id)} SIFA",
        reply_markup=builder.as_markup()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã 1 –Ω–∞ 1
async def resolve_pvp_game(user_id, opponent_id):
    moves_dict = {"rock": "‚úä", "paper": "‚úã", "scissors": "‚úåÔ∏è"}
    user_move = get_active_game(user_id)["move"]
    opponent_move = get_active_game(opponent_id)["move"]

    user_choice = moves_dict[user_move]
    opponent_choice = moves_dict[opponent_move]

    result_user, balance_change_user = calculate_result(user_choice, opponent_choice)
    result_opponent, balance_change_opponent = calculate_result(opponent_choice, user_choice)

    update_user_balance(user_id, balance_change_user)
    update_user_balance(opponent_id, balance_change_opponent)

    await bot.send_message(
        user_id,
        f"–í–∞—à –≤—ã–±–æ—Ä: {user_choice}\n"
        f"–í—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {opponent_choice}\n\n"
        f"{result_user}\n"
        f"–ë–∞–ª–∞–Ω—Å: {get_user_balance(user_id)} SIFA"
    )

    await bot.send_message(
        opponent_id,
        f"–í–∞—à –≤—ã–±–æ—Ä: {opponent_choice}\n"
        f"–í—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {user_choice}\n\n"
        f"{result_opponent}\n"
        f"–ë–∞–ª–∞–Ω—Å: {get_user_balance(opponent_id)} SIFA"
    )

    remove_active_game(user_id)
    remove_active_game(opponent_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def calculate_result(user_choice, opponent_choice):
    if user_choice == opponent_choice:
        return "–ù–∏—á—å—è!", 0
    elif (user_choice == "‚úä" and opponent_choice == "‚úåÔ∏è") or \
         (user_choice == "‚úã" and opponent_choice == "‚úä") or \
         (user_choice == "‚úåÔ∏è" and opponent_choice == "‚úã"):
        return "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ +20 SIFA! üéâ", 20
    else:
        return "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 SIFA üò¢", -10

if __name__ == "__main__":
    logger.info("Starting bot...")
    asyncio.run(dp.start_polling(bot))